ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
V/Users/Ian/git/RRT/RRT.psyexp
p7
sS'dataFileName'
p8
V/Users/Ian/git/RRT/data/_RRT_2016_May_01_1533
p9
sS'runtimeInfo'
p10
NsS'name'
p11
S'RRT'
p12
sS'dataNames'
p13
(lp14
S'required_response.keys'
p15
aS'required_response.corr'
p16
aS'required_response.rt'
p17
aS'feedback_response.keys'
p18
aS'feedback_response.corr'
p19
aS'feedback_response.rt'
p20
asS'autoLog'
p21
I01
sS'extraInfo'
p22
(dp23
Vparticipant
p24
V
sVgender
p25
V
sVage
p26
V
sS'frameRate'
p27
cnumpy.core.multiarray
scalar
p28
(cnumpy
dtype
p29
(S'f8'
I0
I1
tRp30
(I3
S'<'
NNNI-1
I-1
I0
tbS'\xec\x94\xac6p\xf0M@'
tRp31
sS'expName'
p32
g12
sS'date'
p33
V2016_May_01_1533
p34
ssS'loopsUnfinished'
p35
(lp36
g1
(cpsychopy.data
TrialHandler
p37
g3
NtRp38
(dp39
S'origin'
p40
V<PsychoPy2experiment version="1.82.01" encoding="utf-8">\u000a  <Settings>\u000a    <Param name="Show mouse" val="False" valType="bool" updates="None"/>\u000a    <Param name="Data filename" val="'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None"/>\u000a    <Param name="Monitor" val="testMonitor" valType="str" updates="None"/>\u000a    <Param name="Enable Escape" val="True" valType="bool" updates="None"/>\u000a    <Param name="color" val="$[-1.000,-1.000,-1.000]" valType="str" updates="None"/>\u000a    <Param name="Window size (pixels)" val="[1366, 768]" valType="code" updates="None"/>\u000a    <Param name="Full-screen window" val="True" valType="bool" updates="None"/>\u000a    <Param name="colorSpace" val="rgb" valType="str" updates="None"/>\u000a    <Param name="Experiment info" val="{u'gender': u'', u'age': u'', u'participant': u''}" valType="code" updates="None"/>\u000a    <Param name="Save csv file" val="False" valType="bool" updates="None"/>\u000a    <Param name="Show info dlg" val="True" valType="bool" updates="None"/>\u000a    <Param name="Save wide csv file" val="True" valType="bool" updates="None"/>\u000a    <Param name="Save psydat file" val="True" valType="bool" updates="None"/>\u000a    <Param name="expName" val="RRT" valType="str" updates="None"/>\u000a    <Param name="logging level" val="warning" valType="code" updates="None"/>\u000a    <Param name="blendMode" val="avg" valType="str" updates="None"/>\u000a    <Param name="Save excel file" val="False" valType="bool" updates="None"/>\u000a    <Param name="Units" val="use prefs" valType="str" updates="None"/>\u000a    <Param name="Save log file" val="True" valType="bool" updates="None"/>\u000a    <Param name="Screen" val="1" valType="num" updates="None"/>\u000a  </Settings>\u000a  <Routines>\u000a    <Routine name="trial">\u000a      <CodeComponent name="trials_code">\u000a        <Param name="Begin Experiment" val="msg=&quot;&quot;" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="trials_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# choose a random exemplar from the appropriate trial type list&#10;if trial_type == 1:&#10;    stimulus = trial_type_1_trials.pop()&#10;elif trial_type == 2:&#10;    stimulus = trial_type_2_trials.pop()&#10;elif trial_type == 3:&#10;    stimulus = trial_type_3_trials.pop()&#10;elif trial_type == 4:&#10;    stimulus = trial_type_4_trials.pop()&#10;elif trial_type == 5:&#10;    stimulus = trial_type_5_trials.pop()&#10;elif trial_type == 6:&#10;    stimulus = trial_type_6_trials.pop()&#10;&#10;# stimulus colors &#10;if trial_type == 1 or trial_type == 2:&#10;     stimulus_color = &quot;orange&quot; &#10;elif trial_type &gt;2:&#10;     stimulus_color = &quot;cyan&quot;&#10;&#10;# correct and incorrect answers for each trialtype in each block&#10;if trial_type == 1: #true&#10;    required_allowed = &quot;i&quot;&#10;    required_correct = &quot;i&quot;&#10;    feedback_allowed = &quot;e&quot;&#10;    feedback_correct = &quot;e&quot;&#10;elif trial_type == 2: #false&#10;    required_allowed = &quot;e&quot;&#10;    required_correct = &quot;e&quot;&#10;    feedback_allowed = &quot;i&quot;&#10;    feedback_correct = &quot;i&quot;&#10;if blocks.thisN &lt;= 2:&#10;    if trial_type == 3: #self pos&#10;        required_allowed = &quot;i&quot;&#10;        required_correct = &quot;i&quot;&#10;        feedback_allowed = &quot;e&quot;&#10;        feedback_correct = &quot;e&quot;&#10;    elif trial_type == 4: #self neg&#10;        required_allowed = &quot;e&quot;&#10;        required_correct = &quot;e&quot;&#10;        feedback_allowed = &quot;i&quot;&#10;        feedback_correct = &quot;i&quot;&#10;    elif trial_type == 5: #self not pos&#10;        required_allowed = &quot;e&quot;&#10;        required_correct = &quot;e&quot;&#10;        feedback_allowed = &quot;i&quot;&#10;        feedback_correct = &quot;i&quot;&#10;    elif trial_type == 6: #self not neg&#10;        required_allowed = &quot;i&quot;&#10;        required_correct = &quot;i&quot;&#10;        feedback_allowed = &quot;e&quot;&#10;        feedback_correct = &quot;e&quot;&#10;elif blocks.thisN &gt;= 3:&#10;    if trial_type == 3: #self pos&#10;        required_allowed = &quot;e&quot;&#10;        required_correct = &quot;e&quot;&#10;        feedback_allowed = &quot;i&quot;&#10;        feedback_correct = &quot;i&quot;&#10;    elif trial_type == 4: #self neg&#10;        required_allowed = &quot;i&quot;&#10;        required_correct = &quot;i&quot;&#10;        feedback_allowed = &quot;e&quot;&#10;        feedback_correct = &quot;e&quot;&#10;    elif trial_type == 5: #self not pos&#10;        required_allowed = &quot;i&quot;&#10;        required_correct = &quot;i&quot;&#10;        feedback_allowed = &quot;e&quot;&#10;        feedback_correct = &quot;e&quot;&#10;    elif trial_type == 6: #self not neg&#10;        required_allowed = &quot;e&quot;&#10;        required_correct = &quot;e&quot;&#10;        feedback_allowed = &quot;i&quot;&#10;        feedback_correct = &quot;i&quot;" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="if len(feedback_response.keys)&lt;1:&#10;    msg=&quot;&quot;&#10;else:&#10;    msg=&quot;X&quot;" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <KeyboardComponent name="required_response">\u000a        <Param name="correctAns" val="$required_correct " valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="required_response" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="required_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.3" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <KeyboardComponent name="feedback_response">\u000a        <Param name="correctAns" val="$feedback_correct " valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="feedback_response" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="False" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="feedback_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val=".3" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <TextComponent name="stimulus_box">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus_box" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="$stimulus_color" valType="str" updates="set every repeat"/>\u000a        <Param name="text" val="$stimulus" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.3" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="feedback">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="feedback" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="red" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg" valType="str" updates="set every frame"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val=".3" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.2" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="true_text">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="true_text" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$true_label" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0.75, 0.75]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="false_text">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="false_text" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$false_label" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[-0.75, 0.75]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a    </Routine>\u000a    <Routine name="instruction">\u000a      <CodeComponent name="block_code">\u000a        <Param name="Begin Experiment" val="# Dependencies&#10;import itertools  # for flattening lists of lists into lists&#10;import random&#10;&#10;# Import stimuli exemplars&#10;exemplars_filename = 'stimuli.xlsx'&#10;exemplars = data.importConditions(exemplars_filename)# Import stimuli exemplars" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="block_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="if blocks.thisN == 0:&#10;    trial_rows = &quot;0:2&quot; &#10;    n_block_repeats = 10   #2*10 = 20 trials&#10;elif blocks.thisN == 1:&#10;    trial_rows = &quot;2:6&quot; &#10;    n_block_repeats = 5   #4*5 = 20 trials&#10;elif blocks.thisN == 2:&#10;    trial_rows = &quot;0:6&quot; &#10;    n_block_repeats = 10   #6*10 = 60 trials&#10;elif blocks.thisN == 3:&#10;    trial_rows = &quot;2:6&quot; &#10;    n_block_repeats = 5   #4*5 = 20 trials&#10;elif blocks.thisN == 4:&#10;    trial_rows = &quot;0:6&quot; &#10;    n_block_repeats = 10   #6*10 = 60 trials&#10;&#10;# Generate list of stimuli for the block&#10;multiplier = 1&#10;# target_1&#10;trial_type_1_trials = dict()  # declare a dict to be populated&#10;for i in range(len(exemplars)):&#10;    trial_type_1_trials[i] = [exemplars[i]['trial_type_1_exemplars']] * multiplier  # populate the dict from vertical reads of the conditions&#10;trial_type_1_trials = trial_type_1_trials.values()  # extract only values (and not keys) from the list of dicts&#10;trial_type_1_trials = list(itertools.chain(*trial_type_1_trials))  # flatten the list of dicts into a list&#10;random.shuffle(trial_type_1_trials)  # shuffle this list, so that it can be drawn from by the trials&#10;&#10;# target_2&#10;trial_type_2_trials = dict()  # declare a dict to be populated&#10;for i in range(len(exemplars)):&#10;    trial_type_2_trials[i] = [exemplars[i]['trial_type_2_exemplars']] * multiplier  # populate the dict from vertical reads of the conditions&#10;trial_type_2_trials = trial_type_2_trials.values()  # extract only values (and not keys) from the list of dicts&#10;trial_type_2_trials = list(itertools.chain(*trial_type_2_trials))  # flatten the list of dicts into a list&#10;random.shuffle(trial_type_2_trials)  # shuffle this list, so that it can be drawn from by the trials&#10;&#10;# target_3&#10;trial_type_3_trials = dict()  # declare a dict to be populated&#10;for i in range(len(exemplars)):&#10;    trial_type_3_trials[i] = [exemplars[i]['trial_type_3_exemplars']] * multiplier  # populate the dict from vertical reads of the conditions&#10;trial_type_3_trials = trial_type_3_trials.values()  # extract only values (and not keys) from the list of dicts&#10;trial_type_3_trials = list(itertools.chain(*trial_type_3_trials))  # flatten the list of dicts into a list&#10;random.shuffle(trial_type_3_trials)  # shuffle this list, so that it can be drawn from by the trials&#10;&#10;# target_4&#10;trial_type_4_trials = dict()  # declare a dict to be populated&#10;for i in range(len(exemplars)):&#10;    trial_type_4_trials[i] = [exemplars[i]['trial_type_4_exemplars']] * multiplier  # populate the dict from vertical reads of the conditions&#10;trial_type_4_trials = trial_type_4_trials.values()  # extract only values (and not keys) from the list of dicts&#10;trial_type_4_trials = list(itertools.chain(*trial_type_4_trials))  # flatten the list of dicts into a list&#10;random.shuffle(trial_type_4_trials)  # shuffle this list, so that it can be drawn from by the trials&#10;&#10;# target_5&#10;trial_type_5_trials = dict()  # declare a dict to be populated&#10;for i in range(len(exemplars)):&#10;    trial_type_5_trials[i] = [exemplars[i]['trial_type_5_exemplars']] * multiplier  # populate the dict from vertical reads of the conditions&#10;trial_type_5_trials = trial_type_5_trials.values()  # extract only values (and not keys) from the list of dicts&#10;trial_type_5_trials = list(itertools.chain(*trial_type_5_trials))  # flatten the list of dicts into a list&#10;random.shuffle(trial_type_5_trials)  # shuffle this list, so that it can be drawn from by the trials&#10;&#10;# target_6&#10;trial_type_6_trials = dict()  # declare a dict to be populated&#10;for i in range(len(exemplars)):&#10;    trial_type_6_trials[i] = [exemplars[i]['trial_type_6_exemplars']] * multiplier  # populate the dict from vertical reads of the conditions&#10;trial_type_6_trials = trial_type_6_trials.values()  # extract only values (and not keys) from the list of dicts&#10;trial_type_6_trials = list(itertools.chain(*trial_type_6_trials))  # flatten the list of dicts into a list&#10;random.shuffle(trial_type_6_trials)  # shuffle this list, so that it can be drawn from by the trials&#10;" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="instructions_box">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="instructions_box" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="1.6" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$instructions" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="instructions_key">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="instructions_key" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="2" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="end">\u000a      <TextComponent name="end_box">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="end_box" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="End of the task" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="3" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.75" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a    </Routine>\u000a  </Routines>\u000a  <Flow>\u000a    <LoopInitiator loopType="TrialHandler" name="blocks">\u000a      <Param name="conditionsFile" val="instructions.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="blocks" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="1" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'block': 1, u'instructions': u'In this response task will you have to react to words and propositions that are presented on the screen. In the next phase words will be presented in ORANGE.\u005cn\u005cnIt is your job to decide as soon as possible whether the word refers to TRUE or FALSE.\u005cn\u005cnPress the I key if the word is synonymous with TRUE.\u005cnPress the E key if the word is a synonym for FALSE.\u005cn\u005cnIf you make a mistake, hit the correct key as soon as possible.\u005cn\u005cnPut your two index fingers on the E and I keys. Press either one to start.'}, {u'block': 2, u'instructions': u&quot;The next phase some propositions will be presented in BLUE.\u005cnThese propositons are always statements about SELF ESTEEM.\u005cn\u005cnYou must respond AS IF 'I am good and not bad'.\u005cn\u005cnPress the I key when the statement is TRUE according to the above rule.\u005cnPress the E key when the statement is FALSE according to the above rule.\u005cn\u005cnFor example:\u005cnWhen the proposition 'I am valuable' appears, respond with the right response (TRUE).\u005cnWhen the proposition 'I am worthless' appears, respond with the left response (FALSE).\u005cn\u005cnIf you make a mistake hit the correct key as soon as possible.\u005cn\u005cnPut your two index fingers on the E and I keys. Press either one to start.&quot;}, {u'block': 3, u'instructions': u&quot;Very good!\u005cn\u005cnThe next phase some words will be presented in ORANGE and some propositions in BLUE. These propositons are always statements about SELF ESTEEM.\u005cn\u005cnAgain, you must respond AS IF 'I am good and not bad'.\u005cn\u005cnPress the I key when the statement is TRUE according to the above rule.\u005cnPress the E key when the statement is FALSE according to the above rule.\u005cn\u005cnThe rule that you must respond to the orange words does not change:\u005cn\u005cnPress the I key if the word is synonymous with TRUE.\u005cnPress the E key if the word is a synonym for FALSE.\u005cn\u005cnIf you make a mistake hit the correct key as soon as possible.\u005cn\u005cnPut your two index fingers on the E and I keys. Press either one to start.&quot;}, {u'block': 4, u'instructions': u&quot;IMPORANT: THE RULE FOR THE BLUE STATEMENTS HAS NOW CHANGED.\u005cn\u005cnYou must respond AS IF 'I am bad and not good'.\u005cn\u005cnPress the I key when the statement is TRUE according to the above rule.\u005cnPress the E key when the statement is FALSE according to the above rule.\u005cn\u005cnFor example:\u005cnWhen the proposition 'I am valuable' appears, respond with the left response (FALSE).\u005cnWhen the proposition 'I am worthless' appears, respond with the right response (TRUE).\u005cn\u005cnIf you make a mistake, hit the correct key as soon as possible.\u005cn\u005cnPut your two index fingers on the E and I keys. Press either one to start.&quot;}, {u'block': 5, u'instructions': u&quot;Very good!\u005cn\u005cnThe next phase will again present words in ORANGE and statements in BLUE.\u005cn\u005cnAgain, you must respond AS IF 'I am bad and not good'.\u005cn\u005cnPress the I key when the statement is TRUE according to the above rule.\u005cnPress the E key when the statement is FALSE according to the above rule.\u005cn\u005cnThe rule that you must respond to the orange words does not change:\u005cnPress the I key if the word is synonymous with TRUE.\u005cnPress the E key if the word is a synonym for FALSE.\u005cn\u005cnIf you make a mistake, hit the correct key as soon as possible.\u005cn\u005cnPut your two index fingers on the E and I keys. Press either one to start.&quot;}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="instruction"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="trials" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="fullRandom" valType="str" updates="None"/>\u000a      <Param name="nReps" val="n_block_repeats" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trial_type': 1, u'true_label': u'TRUE', u'false_label': u'FALSE'}, {u'trial_type': 2, u'true_label': u'TRUE', u'false_label': u'FALSE'}, {u'trial_type': 3, u'true_label': u'TRUE', u'false_label': u'FALSE'}, {u'trial_type': 4, u'true_label': u'TRUE', u'false_label': u'FALSE'}, {u'trial_type': 5, u'true_label': u'TRUE', u'false_label': u'FALSE'}, {u'trial_type': 6, u'true_label': u'TRUE', u'false_label': u'FALSE'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="$trial_rows" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial"/>\u000a    <LoopTerminator name="trials"/>\u000a    <LoopTerminator name="blocks"/>\u000a    <Routine name="end"/>\u000a  </Flow>\u000a</PsychoPy2experiment>\u000a
p41
sS'thisTrial'
p42
g1
(cpsychopy.data
TrialType
p43
c__builtin__
dict
p44
(dp45
Vinstructions
p46
VIn this reaction time task will you have to respond to words and statements that are presented on screen. \u000a\u000aThe first phase presents both words in orange.\u000a\u000aYour job is to categorise these words as referring to TRUE or FALSE.\u000a\u000aGo as quickly as you can while being accurate.\u000aIf you make a mistake, hit the correct key as soon as possible.\u000a\u000aPut your two index fingers on the E and I keys. Press either one to start.
p47
stRp48
sS'_exp'
p49
I217199728
sg11
S'blocks'
p50
sg6
g7
sS'thisRepN'
p51
I0
sg21
I01
sg22
g23
sS'data'
p52
g1
(cpsychopy.data
DataHandler
p53
g44
(dp54
S'ran'
p55
cnumpy.ma.core
_mareconstruct
p56
(cnumpy.ma.core
MaskedArray
p57
cnumpy
ndarray
p58
(I0
tp59
S'b'
tRp60
(I1
(I5
I1
tg29
(S'f4'
I0
I1
tRp61
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
S'\x00\x00\x00\x00\x00'
NtbsS'order'
p62
g56
(g57
g58
g59
S'b'
tRp63
(I1
(I5
I1
tg61
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
S'\x00\x01\x01\x01\x01'
NtbstRp64
(dp65
S'isNumeric'
p66
(dp67
g55
I01
sg62
I01
ssS'trials'
p68
g38
sS'dataTypes'
p69
(lp70
g55
ag62
asS'dataShape'
p71
(lp72
I5
aI1
asbsS'method'
p73
S'sequential'
p74
sS'sequenceIndices'
p75
cnumpy.core.multiarray
_reconstruct
p76
(g58
(I0
tS'b'
tRp77
(I1
(I5
I1
tg29
(S'i4'
I0
I1
tRp78
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00'
tbsS'finished'
p79
I00
sS'nReps'
p80
I1
sS'nRemaining'
p81
I4
sS'trialList'
p82
(lp83
g48
ag1
(g43
g44
(dp84
g46
VThe next phase presents statements about self esteem in blue.\u000a\u000aYou must respond AS IF 'I am good and not bad'.\u000a\u000aFor example:\u000aWhen 'I am valuable' appears, respond with TRUE.\u000aWhen 'I am worthless' appears, respond with FALSE.\u000a\u000aGo as quickly as you can while being accurate.\u000aIf you make a mistake hit the correct key as soon as possible.\u000a\u000aPress E or I to continue.
p85
stRp86
ag1
(g43
g44
(dp87
g46
VThe next phase presents both the orange words and blue statements.\u000a\u000aYou must both respond to the statements in blue AS IF 'I am good and not bad',\u000aand categorise the orange words as referring to TRUE or FALSE.\u000a\u000aGo as quickly as you can while being accurate.\u000aIf you make a mistake hit the correct key as soon as possible.\u000a\u000aPress E or I to continue.
p88
stRp89
ag1
(g43
g44
(dp90
g46
VThe next phase presents only the blue statements.\u000a\u000aIMPORANT: THE RULE FOR THE BLUE STATEMENTS HAS NOW CHANGED.\u000a\u000aYou must respond AS IF 'I am bad and not good'.\u000a\u000aFor example:\u000aWhen 'I am valuable' appears, respond with FALSE.\u000aWhen 'I am worthless' appears, respond with TRUE.\u000a\u000aGo as quickly as you can while being accurate.\u000aIf you make a mistake, hit the correct key as soon as possible.\u000a\u000aPress E or I to continue.
p91
stRp92
ag1
(g43
g44
(dp93
g46
VThe next phase presents both the orange words and blue statements.\u000a\u000aYou must both respond to the statements in blue AS IF 'I am bad and not good',\u000aand categorise the orange words as referring to TRUE or FALSE.\u000a\u000aGo as quickly as you can while being accurate.\u000aIf you make a mistake, hit the correct key as soon as possible.\u000a\u000aPress E or I to continue.
p94
stRp95
asS'seed'
p96
NsS'thisIndex'
p97
g28
(g78
S'\x00\x00\x00\x00'
tRp98
sS'thisN'
p99
I0
sS'thisTrialN'
p100
I0
sS'nTotal'
p101
I5
sS'_warnUseOfNext'
p102
I01
sbag1
(g37
g3
NtRp103
(dp104
g40
V<PsychoPy2experiment version="1.82.01" encoding="utf-8">\u000a  <Settings>\u000a    <Param name="Show mouse" val="False" valType="bool" updates="None"/>\u000a    <Param name="Data filename" val="'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None"/>\u000a    <Param name="Monitor" val="testMonitor" valType="str" updates="None"/>\u000a    <Param name="Enable Escape" val="True" valType="bool" updates="None"/>\u000a    <Param name="color" val="$[-1.000,-1.000,-1.000]" valType="str" updates="None"/>\u000a    <Param name="Window size (pixels)" val="[1366, 768]" valType="code" updates="None"/>\u000a    <Param name="Full-screen window" val="True" valType="bool" updates="None"/>\u000a    <Param name="colorSpace" val="rgb" valType="str" updates="None"/>\u000a    <Param name="Experiment info" val="{u'gender': u'', u'age': u'', u'participant': u''}" valType="code" updates="None"/>\u000a    <Param name="Save csv file" val="False" valType="bool" updates="None"/>\u000a    <Param name="Show info dlg" val="True" valType="bool" updates="None"/>\u000a    <Param name="Save wide csv file" val="True" valType="bool" updates="None"/>\u000a    <Param name="Save psydat file" val="True" valType="bool" updates="None"/>\u000a    <Param name="expName" val="RRT" valType="str" updates="None"/>\u000a    <Param name="logging level" val="warning" valType="code" updates="None"/>\u000a    <Param name="blendMode" val="avg" valType="str" updates="None"/>\u000a    <Param name="Save excel file" val="False" valType="bool" updates="None"/>\u000a    <Param name="Units" val="use prefs" valType="str" updates="None"/>\u000a    <Param name="Save log file" val="True" valType="bool" updates="None"/>\u000a    <Param name="Screen" val="1" valType="num" updates="None"/>\u000a  </Settings>\u000a  <Routines>\u000a    <Routine name="trial">\u000a      <CodeComponent name="trials_code">\u000a        <Param name="Begin Experiment" val="msg=&quot;&quot;" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="trials_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# choose a random exemplar from the appropriate trial type list&#10;if trial_type == 1:&#10;    stimulus = trial_type_1_trials.pop()&#10;elif trial_type == 2:&#10;    stimulus = trial_type_2_trials.pop()&#10;elif trial_type == 3:&#10;    stimulus = trial_type_3_trials.pop()&#10;elif trial_type == 4:&#10;    stimulus = trial_type_4_trials.pop()&#10;elif trial_type == 5:&#10;    stimulus = trial_type_5_trials.pop()&#10;elif trial_type == 6:&#10;    stimulus = trial_type_6_trials.pop()&#10;&#10;# stimulus colors &#10;if trial_type == 1 or trial_type == 2:&#10;     stimulus_color = &quot;orange&quot; &#10;elif trial_type &gt;2:&#10;     stimulus_color = &quot;cyan&quot;&#10;&#10;# correct and incorrect answers for each trialtype in each block&#10;if trial_type == 1: #true&#10;    required_allowed = &quot;i&quot;&#10;    required_correct = &quot;i&quot;&#10;    feedback_allowed = &quot;e&quot;&#10;    feedback_correct = &quot;e&quot;&#10;elif trial_type == 2: #false&#10;    required_allowed = &quot;e&quot;&#10;    required_correct = &quot;e&quot;&#10;    feedback_allowed = &quot;i&quot;&#10;    feedback_correct = &quot;i&quot;&#10;if blocks.thisN &lt;= 2:&#10;    if trial_type == 3: #self pos&#10;        required_allowed = &quot;i&quot;&#10;        required_correct = &quot;i&quot;&#10;        feedback_allowed = &quot;e&quot;&#10;        feedback_correct = &quot;e&quot;&#10;    elif trial_type == 4: #self neg&#10;        required_allowed = &quot;e&quot;&#10;        required_correct = &quot;e&quot;&#10;        feedback_allowed = &quot;i&quot;&#10;        feedback_correct = &quot;i&quot;&#10;    elif trial_type == 5: #self not pos&#10;        required_allowed = &quot;e&quot;&#10;        required_correct = &quot;e&quot;&#10;        feedback_allowed = &quot;i&quot;&#10;        feedback_correct = &quot;i&quot;&#10;    elif trial_type == 6: #self not neg&#10;        required_allowed = &quot;i&quot;&#10;        required_correct = &quot;i&quot;&#10;        feedback_allowed = &quot;e&quot;&#10;        feedback_correct = &quot;e&quot;&#10;elif blocks.thisN &gt;= 3:&#10;    if trial_type == 3: #self pos&#10;        required_allowed = &quot;e&quot;&#10;        required_correct = &quot;e&quot;&#10;        feedback_allowed = &quot;i&quot;&#10;        feedback_correct = &quot;i&quot;&#10;    elif trial_type == 4: #self neg&#10;        required_allowed = &quot;i&quot;&#10;        required_correct = &quot;i&quot;&#10;        feedback_allowed = &quot;e&quot;&#10;        feedback_correct = &quot;e&quot;&#10;    elif trial_type == 5: #self not pos&#10;        required_allowed = &quot;i&quot;&#10;        required_correct = &quot;i&quot;&#10;        feedback_allowed = &quot;e&quot;&#10;        feedback_correct = &quot;e&quot;&#10;    elif trial_type == 6: #self not neg&#10;        required_allowed = &quot;e&quot;&#10;        required_correct = &quot;e&quot;&#10;        feedback_allowed = &quot;i&quot;&#10;        feedback_correct = &quot;i&quot;" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="if len(feedback_response.keys)&lt;1:&#10;    msg=&quot;&quot;&#10;else:&#10;    msg=&quot;X&quot;" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <KeyboardComponent name="required_response">\u000a        <Param name="correctAns" val="$required_correct " valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="required_response" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="required_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.3" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <KeyboardComponent name="feedback_response">\u000a        <Param name="correctAns" val="$feedback_correct " valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="True" valType="bool" updates="constant"/>\u000a        <Param name="name" val="feedback_response" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="False" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="feedback_allowed" valType="code" updates="set every repeat"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val=".3" valType="code" updates="None"/>\u000a        <Param name="store" val="first key" valType="str" updates="constant"/>\u000a      </KeyboardComponent>\u000a      <TextComponent name="stimulus_box">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="stimulus_box" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="$stimulus_color" valType="str" updates="set every repeat"/>\u000a        <Param name="text" val="$stimulus" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.3" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="feedback">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="feedback" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="red" valType="str" updates="constant"/>\u000a        <Param name="text" val="$msg" valType="str" updates="set every frame"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, -.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val=".3" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.2" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="true_text">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="true_text" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$true_label" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0.75, 0.75]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <TextComponent name="false_text">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="false_text" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$false_label" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[-0.75, 0.75]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a    </Routine>\u000a    <Routine name="instruction">\u000a      <CodeComponent name="block_code">\u000a        <Param name="Begin Experiment" val="# Dependencies&#10;import itertools  # for flattening lists of lists into lists&#10;import random&#10;&#10;# Import stimuli exemplars&#10;exemplars_filename = 'stimuli.xlsx'&#10;exemplars = data.importConditions(exemplars_filename)# Import stimuli exemplars" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="block_code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="if blocks.thisN == 0:&#10;    trial_rows = &quot;0:2&quot; &#10;    n_block_repeats = 10   #2*10 = 20 trials&#10;elif blocks.thisN == 1:&#10;    trial_rows = &quot;2:6&quot; &#10;    n_block_repeats = 5   #4*5 = 20 trials&#10;elif blocks.thisN == 2:&#10;    trial_rows = &quot;0:6&quot; &#10;    n_block_repeats = 10   #6*10 = 60 trials&#10;elif blocks.thisN == 3:&#10;    trial_rows = &quot;2:6&quot; &#10;    n_block_repeats = 5   #4*5 = 20 trials&#10;elif blocks.thisN == 4:&#10;    trial_rows = &quot;0:6&quot; &#10;    n_block_repeats = 10   #6*10 = 60 trials&#10;&#10;# Generate list of stimuli for the block&#10;multiplier = 1&#10;# target_1&#10;trial_type_1_trials = dict()  # declare a dict to be populated&#10;for i in range(len(exemplars)):&#10;    trial_type_1_trials[i] = [exemplars[i]['trial_type_1_exemplars']] * multiplier  # populate the dict from vertical reads of the conditions&#10;trial_type_1_trials = trial_type_1_trials.values()  # extract only values (and not keys) from the list of dicts&#10;trial_type_1_trials = list(itertools.chain(*trial_type_1_trials))  # flatten the list of dicts into a list&#10;random.shuffle(trial_type_1_trials)  # shuffle this list, so that it can be drawn from by the trials&#10;&#10;# target_2&#10;trial_type_2_trials = dict()  # declare a dict to be populated&#10;for i in range(len(exemplars)):&#10;    trial_type_2_trials[i] = [exemplars[i]['trial_type_2_exemplars']] * multiplier  # populate the dict from vertical reads of the conditions&#10;trial_type_2_trials = trial_type_2_trials.values()  # extract only values (and not keys) from the list of dicts&#10;trial_type_2_trials = list(itertools.chain(*trial_type_2_trials))  # flatten the list of dicts into a list&#10;random.shuffle(trial_type_2_trials)  # shuffle this list, so that it can be drawn from by the trials&#10;&#10;# target_3&#10;trial_type_3_trials = dict()  # declare a dict to be populated&#10;for i in range(len(exemplars)):&#10;    trial_type_3_trials[i] = [exemplars[i]['trial_type_3_exemplars']] * multiplier  # populate the dict from vertical reads of the conditions&#10;trial_type_3_trials = trial_type_3_trials.values()  # extract only values (and not keys) from the list of dicts&#10;trial_type_3_trials = list(itertools.chain(*trial_type_3_trials))  # flatten the list of dicts into a list&#10;random.shuffle(trial_type_3_trials)  # shuffle this list, so that it can be drawn from by the trials&#10;&#10;# target_4&#10;trial_type_4_trials = dict()  # declare a dict to be populated&#10;for i in range(len(exemplars)):&#10;    trial_type_4_trials[i] = [exemplars[i]['trial_type_4_exemplars']] * multiplier  # populate the dict from vertical reads of the conditions&#10;trial_type_4_trials = trial_type_4_trials.values()  # extract only values (and not keys) from the list of dicts&#10;trial_type_4_trials = list(itertools.chain(*trial_type_4_trials))  # flatten the list of dicts into a list&#10;random.shuffle(trial_type_4_trials)  # shuffle this list, so that it can be drawn from by the trials&#10;&#10;# target_5&#10;trial_type_5_trials = dict()  # declare a dict to be populated&#10;for i in range(len(exemplars)):&#10;    trial_type_5_trials[i] = [exemplars[i]['trial_type_5_exemplars']] * multiplier  # populate the dict from vertical reads of the conditions&#10;trial_type_5_trials = trial_type_5_trials.values()  # extract only values (and not keys) from the list of dicts&#10;trial_type_5_trials = list(itertools.chain(*trial_type_5_trials))  # flatten the list of dicts into a list&#10;random.shuffle(trial_type_5_trials)  # shuffle this list, so that it can be drawn from by the trials&#10;&#10;# target_6&#10;trial_type_6_trials = dict()  # declare a dict to be populated&#10;for i in range(len(exemplars)):&#10;    trial_type_6_trials[i] = [exemplars[i]['trial_type_6_exemplars']] * multiplier  # populate the dict from vertical reads of the conditions&#10;trial_type_6_trials = trial_type_6_trials.values()  # extract only values (and not keys) from the list of dicts&#10;trial_type_6_trials = list(itertools.chain(*trial_type_6_trials))  # flatten the list of dicts into a list&#10;random.shuffle(trial_type_6_trials)  # shuffle this list, so that it can be drawn from by the trials&#10;" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="instructions_box">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="instructions_box" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="1.6" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$instructions" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.08" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="instructions_key">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="instructions_key" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'e', 'i'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="2" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="end">\u000a      <TextComponent name="end_box">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="end_box" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="End of the task" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="3" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.75" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a    </Routine>\u000a  </Routines>\u000a  <Flow>\u000a    <LoopInitiator loopType="TrialHandler" name="blocks">\u000a      <Param name="conditionsFile" val="instructions.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="blocks" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="False" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="1" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'block': 1, u'instructions': u'In this response task will you have to react to words and propositions that are presented on the screen. In the next phase words will be presented in ORANGE.\u005cn\u005cnIt is your job to decide as soon as possible whether the word refers to TRUE or FALSE.\u005cn\u005cnPress the I key if the word is synonymous with TRUE.\u005cnPress the E key if the word is a synonym for FALSE.\u005cn\u005cnIf you make a mistake, hit the correct key as soon as possible.\u005cn\u005cnPut your two index fingers on the E and I keys. Press either one to start.'}, {u'block': 2, u'instructions': u&quot;The next phase some propositions will be presented in BLUE.\u005cnThese propositons are always statements about SELF ESTEEM.\u005cn\u005cnYou must respond AS IF 'I am good and not bad'.\u005cn\u005cnPress the I key when the statement is TRUE according to the above rule.\u005cnPress the E key when the statement is FALSE according to the above rule.\u005cn\u005cnFor example:\u005cnWhen the proposition 'I am valuable' appears, respond with the right response (TRUE).\u005cnWhen the proposition 'I am worthless' appears, respond with the left response (FALSE).\u005cn\u005cnIf you make a mistake hit the correct key as soon as possible.\u005cn\u005cnPut your two index fingers on the E and I keys. Press either one to start.&quot;}, {u'block': 3, u'instructions': u&quot;Very good!\u005cn\u005cnThe next phase some words will be presented in ORANGE and some propositions in BLUE. These propositons are always statements about SELF ESTEEM.\u005cn\u005cnAgain, you must respond AS IF 'I am good and not bad'.\u005cn\u005cnPress the I key when the statement is TRUE according to the above rule.\u005cnPress the E key when the statement is FALSE according to the above rule.\u005cn\u005cnThe rule that you must respond to the orange words does not change:\u005cn\u005cnPress the I key if the word is synonymous with TRUE.\u005cnPress the E key if the word is a synonym for FALSE.\u005cn\u005cnIf you make a mistake hit the correct key as soon as possible.\u005cn\u005cnPut your two index fingers on the E and I keys. Press either one to start.&quot;}, {u'block': 4, u'instructions': u&quot;IMPORANT: THE RULE FOR THE BLUE STATEMENTS HAS NOW CHANGED.\u005cn\u005cnYou must respond AS IF 'I am bad and not good'.\u005cn\u005cnPress the I key when the statement is TRUE according to the above rule.\u005cnPress the E key when the statement is FALSE according to the above rule.\u005cn\u005cnFor example:\u005cnWhen the proposition 'I am valuable' appears, respond with the left response (FALSE).\u005cnWhen the proposition 'I am worthless' appears, respond with the right response (TRUE).\u005cn\u005cnIf you make a mistake, hit the correct key as soon as possible.\u005cn\u005cnPut your two index fingers on the E and I keys. Press either one to start.&quot;}, {u'block': 5, u'instructions': u&quot;Very good!\u005cn\u005cnThe next phase will again present words in ORANGE and statements in BLUE.\u005cn\u005cnAgain, you must respond AS IF 'I am bad and not good'.\u005cn\u005cnPress the I key when the statement is TRUE according to the above rule.\u005cnPress the E key when the statement is FALSE according to the above rule.\u005cn\u005cnThe rule that you must respond to the orange words does not change:\u005cnPress the I key if the word is synonymous with TRUE.\u005cnPress the E key if the word is a synonym for FALSE.\u005cn\u005cnIf you make a mistake, hit the correct key as soon as possible.\u005cn\u005cnPut your two index fingers on the E and I keys. Press either one to start.&quot;}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="instruction"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials">\u000a      <Param name="conditionsFile" val="block_layout.xlsx" valType="str" updates="None"/>\u000a      <Param name="name" val="trials" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="fullRandom" valType="str" updates="None"/>\u000a      <Param name="nReps" val="n_block_repeats" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="[{u'trial_type': 1, u'true_label': u'TRUE', u'false_label': u'FALSE'}, {u'trial_type': 2, u'true_label': u'TRUE', u'false_label': u'FALSE'}, {u'trial_type': 3, u'true_label': u'TRUE', u'false_label': u'FALSE'}, {u'trial_type': 4, u'true_label': u'TRUE', u'false_label': u'FALSE'}, {u'trial_type': 5, u'true_label': u'TRUE', u'false_label': u'FALSE'}, {u'trial_type': 6, u'true_label': u'TRUE', u'false_label': u'FALSE'}]" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="$trial_rows" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial"/>\u000a    <LoopTerminator name="trials"/>\u000a    <LoopTerminator name="blocks"/>\u000a    <Routine name="end"/>\u000a  </Flow>\u000a</PsychoPy2experiment>\u000a
p105
sg42
g1
(g43
g44
(dp106
Vtrial_type
p107
I2
sVtrue_label
p108
VTRUE
p109
sVfalse_label
p110
VFALSE
p111
stRp112
sg49
I217199728
sg11
g68
sg6
g7
sg51
I4
sg21
I01
sg22
g23
sg52
g1
(g53
g44
(dp113
g55
g56
(g57
g58
g59
S'b'
tRp114
(I1
(I2
I10
tg61
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg17
g56
(g57
g58
g59
S'b'
tRp115
(I1
(I2
I10
tg61
I00
S" d\xcf= \xf5\xf3=`\xc3\xf3=\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00p\xa2\xd6>\xb0m\x89>\x90\x94\x1b>\xf0'\n>\xc0\xa0\xf0=\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
S'\x00\x00\x00\x01\x01\x01\x01\x01\x01\x01\x00\x00\x00\x00\x00\x01\x01\x01\x01\x01'
Ntbsg15
g76
(g58
(I0
tS'b'
tRp116
(I1
(I2
I10
tg29
(S'O4'
I0
I1
tRp117
(I3
S'|'
NNNI-1
I-1
I63
tbI00
(lp118
S'i'
aS'i'
aS'i'
aS'--'
p119
aS'--'
p120
aS'--'
p121
aS'--'
p122
aS'--'
p123
aS'--'
p124
aS'--'
p125
aS'e'
aS'e'
aS'e'
aS'e'
aS'e'
aS'--'
p126
aS'--'
p127
aS'--'
p128
aS'--'
p129
aS'--'
p130
atbsg16
g56
(g57
g58
g59
S'b'
tRp131
(I1
(I2
I10
tg61
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
S'\x00\x00\x00\x01\x01\x01\x01\x01\x01\x01\x00\x00\x00\x00\x00\x01\x01\x01\x01\x01'
Ntbsg19
g56
(g57
g58
g59
S'b'
tRp132
(I1
(I2
I10
tg61
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
S'\x00\x00\x00\x01\x01\x01\x01\x01\x01\x01\x00\x00\x00\x00\x00\x01\x01\x01\x01\x01'
Ntbsg18
g76
(g58
(I0
tS'b'
tRp133
(I1
(I2
I10
tg117
I00
(lp134
NaNaNaS'--'
p135
aS'--'
p136
aS'--'
p137
aS'--'
p138
aS'--'
p139
aS'--'
p140
aS'--'
p141
aS'i'
aS'i'
aNaS'i'
aNaS'--'
p142
aS'--'
p143
aS'--'
p144
aS'--'
p145
aS'--'
p146
atbsg20
g56
(g57
g58
g59
S'b'
tRp147
(I1
(I2
I10
tg61
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00HE\xbc>\xa0\r\x80>\x00\x00\x00\x00`\xa4\t>\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
S'\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x00\x00\x01\x00\x01\x01\x01\x01\x01\x01'
Ntbsg62
g56
(g57
g58
g59
S'b'
tRp148
(I1
(I2
I10
tg61
I00
S'\x00\x00\x80@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\xa0@\x00\x00\x00A\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
S'\x00\x00\x00\x01\x01\x01\x01\x01\x01\x01\x00\x00\x00\x00\x00\x00\x01\x01\x01\x01'
NtbstRp149
(dp150
g66
(dp151
g55
I01
sg17
I01
sg15
I00
sg16
I01
sg19
I01
sg18
I00
sg20
I01
sg62
I01
ssg68
g103
sg69
(lp152
g55
ag62
ag15
ag16
ag17
ag18
ag19
ag20
asg71
(lp153
I2
aI10
asbsg73
S'fullRandom'
p154
sg75
g76
(g58
(I0
tS'b'
tRp155
(I1
(I2
I10
tg117
I00
(lp156
I1
aI1
aI0
aI0
aI1
aI0
aI1
aI0
aI1
aI0
aI1
aI1
aI1
aI0
aI0
aI1
aI0
aI0
aI1
aI0
atbsg79
I00
sg80
I10
sg81
I11
sg82
(lp157
g1
(g43
g44
(dp158
g107
I1
sg108
g109
sg110
g111
stRp159
ag112
asg96
Nsg97
I1
sg99
I8
sg100
I0
sg101
I20
sg102
I01
sbasS'saveWideText'
p160
I01
sS'thisEntry'
p161
(dp162
sS'version'
p163
S''
sS'_paramNamesSoFar'
p164
(lp165
g46
ag107
ag108
ag110
asS'entries'
p166
(lp167
(dp168
g108
g109
sg107
I2
sg18
S'i'
sg27
g31
sg15
S'e'
sg16
I1
sg25
V
sg33
g34
sg46
g47
sS'trials.thisIndex'
p169
I1
sg24
V
sS'blocks.thisIndex'
p170
g98
sS'trials.thisRepN'
p171
I0
sg26
V
sS'trials.thisN'
p172
I0
sg19
I1
sg32
g12
sS'trials.thisTrialN'
p173
I0
sS'blocks.thisRepN'
p174
I0
sg17
F0.41920804977416992
sg110
g111
sg20
F0.36771607398986816
sS'blocks.thisN'
p175
I0
sS'blocks.thisTrialN'
p176
I0
sa(dp177
g108
g109
sg107
I2
sg18
S'i'
sg27
g31
sg15
S'e'
sg16
I1
sg25
V
sg33
g34
sg46
g47
sS'trials.thisIndex'
p178
I1
sg24
V
sS'blocks.thisIndex'
p179
g98
sS'trials.thisRepN'
p180
I0
sg26
V
sS'trials.thisN'
p181
I1
sg19
I1
sg32
g12
sS'trials.thisTrialN'
p182
I1
sS'blocks.thisRepN'
p183
I0
sg17
F0.26841497421264648
sg110
g111
sg20
F0.25010395050048828
sS'blocks.thisN'
p184
I0
sS'blocks.thisTrialN'
p185
I0
sa(dp186
g108
g109
sg107
I2
sg18
Nsg27
g31
sg15
S'e'
sg16
I1
sg25
V
sg33
g34
sg46
g47
sS'trials.thisIndex'
p187
I1
sg24
V
sS'blocks.thisIndex'
p188
g98
sS'trials.thisRepN'
p189
I1
sg26
V
sS'trials.thisN'
p190
I2
sg19
I0
sg32
g12
sS'trials.thisTrialN'
p191
I0
sS'blocks.thisRepN'
p192
I0
sg17
F0.15193390846252441
sg110
g111
sS'blocks.thisN'
p193
I0
sS'blocks.thisTrialN'
p194
I0
sa(dp195
g108
g109
sg107
I2
sg18
S'i'
sg27
g31
sg15
S'e'
sg16
I1
sg25
V
sg33
g34
sg46
g47
sS'trials.thisIndex'
p196
I1
sg24
V
sS'blocks.thisIndex'
p197
g98
sS'trials.thisRepN'
p198
I1
sg26
V
sS'trials.thisN'
p199
I3
sg19
I1
sg32
g12
sS'trials.thisTrialN'
p200
I1
sS'blocks.thisRepN'
p201
I0
sg17
F0.1349179744720459
sg110
g111
sg20
F0.13441610336303711
sS'blocks.thisN'
p202
I0
sS'blocks.thisTrialN'
p203
I0
sa(dp204
g108
g109
sg107
I1
sg18
Nsg27
g31
sg15
S'i'
sg16
I1
sg25
V
sg33
g34
sg46
g47
sS'trials.thisIndex'
p205
I0
sg24
V
sS'blocks.thisIndex'
p206
g98
sS'trials.thisRepN'
p207
I2
sg26
V
sS'trials.thisN'
p208
I4
sg19
I0
sg32
g12
sS'trials.thisTrialN'
p209
I0
sS'blocks.thisRepN'
p210
I0
sg17
F0.10126519203186035
sg110
g111
sS'blocks.thisN'
p211
I0
sS'blocks.thisTrialN'
p212
I0
sa(dp213
g108
g109
sg107
I2
sg18
Nsg27
g31
sg15
S'e'
sg16
I1
sg25
V
sg33
g34
sg46
g47
sS'trials.thisIndex'
p214
I1
sg24
V
sS'blocks.thisIndex'
p215
g98
sS'trials.thisRepN'
p216
I2
sg26
V
sS'trials.thisN'
p217
I5
sg19
I0
sg32
g12
sS'trials.thisTrialN'
p218
I1
sS'blocks.thisRepN'
p219
I0
sg17
F0.11749410629272461
sg110
g111
sS'blocks.thisN'
p220
I0
sS'blocks.thisTrialN'
p221
I0
sa(dp222
g108
g109
sg107
I1
sg18
Nsg27
g31
sg15
S'i'
sg16
I1
sg25
V
sg33
g34
sg46
g47
sS'trials.thisIndex'
p223
I0
sg24
V
sS'blocks.thisIndex'
p224
g98
sS'trials.thisRepN'
p225
I3
sg26
V
sS'trials.thisN'
p226
I6
sg19
I0
sg32
g12
sS'trials.thisTrialN'
p227
I0
sS'blocks.thisRepN'
p228
I0
sg17
F0.11911988258361816
sg110
g111
sS'blocks.thisN'
p229
I0
sS'blocks.thisTrialN'
p230
I0
sa(dp231
g108
g109
sg107
I1
sg18
Nsg27
g31
sg15
S'i'
sg16
I1
sg25
V
sg33
g34
sg46
g47
sS'trials.thisIndex'
p232
I0
sg24
V
sS'blocks.thisIndex'
p233
g98
sS'trials.thisRepN'
p234
I3
sg26
V
sS'trials.thisN'
p235
I7
sg19
I0
sg32
g12
sS'trials.thisTrialN'
p236
I1
sS'blocks.thisRepN'
p237
I0
sg17
F0.11902499198913574
sg110
g111
sS'blocks.thisN'
p238
I0
sS'blocks.thisTrialN'
p239
I0
sasS'loops'
p240
(lp241
g38
ag103
asS'savePickle'
p242
I00
sb.